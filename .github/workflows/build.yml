name: "Build"

on:
  pull_request: {}
  push:
    branches:
      - master

permissions: {}

jobs:
  install-dependencies:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: Carthage
          key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}

      - if: steps.carthage-cache.outputs.cache-hit != 'true'
        run: carthage bootstrap --use-xcframeworks --no-use-binaries --cache-builds

  test-ios:
    depends-on: install-dependencies

    strategy:
      fail-fast: true
      matrix:
        runner: ["macos-13"]
        build:
          - {os: "16", xcode: "14.3.1", swift: "5.9"}
          - {os: "16", xcode: "14.3.1", swift: "5.8"}
          - {os: "16", xcode: "14.3.1", swift: "5.7"}
          # - {os: "15", xcode: "14.3.1", swift: "5.9"}
          # - {os: "15", xcode: "14.3.1", swift: "5.8"}
          # - {os: "15", xcode: "14.3.1", swift: "5.7"}
          # - {os: "14", xcode: "14.3.1", swift: "5.9"}
          # - {os: "14", xcode: "14.3.1", swift: "5.8"}
          # - {os: "14", xcode: "14.3.1", swift: "5.7"}
          # - {os: "13", xcode: "14.3.1", swift: "5.9"}
          # - {os: "13", xcode: "14.3.1", swift: "5.8"}
          # - {os: "13", xcode: "14.3.1", swift: "5.7"}

    name: iOS ${{ matrix.build['os'] }} (Swift ${{ matrix.build['swift'] }}, Xcode ${{ matrix.build['xcode'] }}, Runner ${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v3

      - run: sudo xcode-select -switch /Applications/Xcode_${{ matrix.build['xcode'] }}.app && /usr/bin/xcodebuild -version

      - uses: actions/cache@v3
        with:
          path: Carthage
          key: ${{ runner.os }}-carthage-ios-${{ hashFiles('**/Cartfile.resolved') }}

      - if: steps.carthage-cache.outputs.cache-hit != 'true'
        run: carthage bootstrap  --platform iOS --use-xcframeworks --no-use-binaries --cache-builds

      - run: set -o pipefail && xcodebuild test -project Auth0.xcodeproj -enableCodeCoverage YES -scheme 'Auth0.iOS' -destination 'platform=iOS Simulator,OS=${{ matrix.build['os'] }},name=iPhone 14' | xcpretty

      - run: swift test --enable-code-coverage

  # build-and-test:
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       scheme: ["macOS", "tvOS"]
  #       os: ["13", "12", "11"]
  #       xcode: ["14.3.1"]
  #       swift: ["5.9", "5.8", "5.7"]

  #   # Label the job with the platform, Xcode version, and Swift version
  #   name: ${{ matrix.scheme }} ${{ matrix.os }} (Xcode ${{ matrix.xcode }}, Swift ${{ matrix.swift }}, Runner macOS-${{ matrix.os }})

  #   # Run the job on macOS
  #   runs-on: macos-${{ matrix.os }}

  #   env:
  #     XCODEDEBUG_TEST: test -project Auth0.xcodeproj -enableCodeCoverage YES -scheme 'Auth0.${{ matrix.scheme }}' -destination
  #     IOS_DESTINATION: platform=iOS Simulator,OS=${{ matrix.os }},name=iPhone 14 Pro
  #     MACOS_DESTINATION: platform=macOS,OS=${{ matrix.os }}
  #     TVOS_DESTINATION: platform=tvOS Simulator,OS=${{ matrix.os }},name=Apple TV 4K

  #   steps:
  #     - name: "Checkout Code"
  #       uses: actions/checkout@v3

  #     # - uses: mxschmitt/action-tmate@v3
  #     #   with:
  #     #     detached: true
  #     - run: sudo xcode-select -s "/Applications/Xcode_${{ matrix.xcode }}.app"

  #     - if: ${{ env.scheme == 'iOS' }}
  #       run: ${{ env.XCODEDEBUG_TEST }} ${{ env.IOS_DESTINATION }} | xcpretty

  #     - if: ${{ env.scheme == 'macOS' }}
  #       run: ${{ env.XCODEDEBUG_TEST }} ${{ env.MACOS_DESTINATION }} | xcpretty

  #     - if: ${{ env.scheme == 'tvOS' }}
  #       run: ${{ env.XCODEDEBUG_TEST }} ${{ env.TVOS_DESTINATION }} | xcpretty

  #     - run: swift test --enable-code-coverage

  swiftlint:
    name: "Swiftlint"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - run: brew install swiftlint --force

      - run: swift lint  --parallel --configuration .swiftlint.yml -r .

  cocoapods-lint:
    name: "Cocoapods Lint"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - run: bundle install
        env:
          BUNDLE_WITHOUT: development # Stop bundler tool from installing development dependencies

      - run: bundle exec fastlane run pod_lib_lint verbose:false allow_warnings:true platforms:ios,osx,tvos
